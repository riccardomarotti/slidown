name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wkhtmltopdf
        sudo apt-get install -y qt5-qmake qtbase5-dev qtwebengine5-dev
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
        sudo apt-get install -y libqt5gui5 libqt5widgets5 libqt5webenginewidgets5
        # Install latest pandoc from GitHub releases
        wget https://github.com/jgm/pandoc/releases/download/3.5/pandoc-3.5-1-amd64.deb
        sudo dpkg -i pandoc-3.5-1-amd64.deb
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-cov
    
    - name: Run tests
      run: |
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99.0
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        make all_tests
      env:
        QT_QPA_PLATFORM: offscreen

# Removed wheel build for now - focusing on binary releases only

  build-appimage:
    name: Build AppImage (without PyInstaller)
    runs-on: ubuntu-24.04
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc wkhtmltopdf fuse
        sudo apt-get install -y qt5-qmake qtbase5-dev qtwebengine5-dev
        sudo apt-get install -y libqt5gui5 libqt5widgets5 libqt5webenginewidgets5
    
    - name: Install python-appimage
      run: |
        python -m pip install --upgrade pip
        pip install python-appimage
        pip install -r requirements.txt
    
    - name: Create AppImage
      run: |
        # Create entry point script
        mkdir -p dist
        cat > dist/slidown-launcher.py << 'EOF'
        #!/usr/bin/env python3
        import sys
        import os
        
        # Add bundled packages to path
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'slidown'))
        
        from slidown.main import main
        if __name__ == '__main__':
            main()
        EOF
        
        # Copy source code
        cp -r slidown dist/
        cp -r reveal.js dist/
        cp -r icon dist/
        
        # Create AppImage using build app command
        python-appimage build app dist/slidown-launcher.py
    
    - name: Upload AppImage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: appimage-python
        path: "*.AppImage"

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build-appimage]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        
        # Try to extract changelog content for this version
        if grep -q "## \[$VERSION\]" CHANGELOG.md; then
          # Extract content between this version and the next ## section
          sed -n "/## \[$VERSION\]/,/^## /p" CHANGELOG.md | sed '$d' > changelog_section.md
          
          # Combine with installation instructions from template
          echo "## Slidown v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          # Skip the first line (version header) from changelog
          tail -n +2 changelog_section.md >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation" >> release_notes.md
          sed -n '/### Installation/,/### Download/p' .github/release-template.md | sed '$d' | tail -n +2 >> release_notes.md
          echo "" >> release_notes.md
          echo "### Download" >> release_notes.md
          sed -n '/### Download/,$p' .github/release-template.md | tail -n +2 >> release_notes.md
        else
          # Fallback to template approach
          sed "s/{{VERSION}}/$VERSION/g" .github/release-template.md > release_notes.md
        fi
        
        # Replace version placeholders
        sed -i "s/{{VERSION}}/$VERSION/g" release_notes.md
        
        # Set release notes file path for next step
        echo "RELEASE_NOTES_FILE=release_notes.md" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Slidown v${{ steps.get_version.outputs.VERSION }}
        body_path: ${{ steps.release_notes.outputs.RELEASE_NOTES_FILE }}
        draft: false
        prerelease: false
        files: |
          appimage-python/*.AppImage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  publish-pypi:
#    name: Publish to PyPI
#    runs-on: ubuntu-latest
#    environment: PyPI
#    needs: [test, github-release]
#
#    steps:
#    - uses: actions/checkout@v4
#      with:
#        submodules: recursive
#
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.12'
#
#    - name: Install build dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install build twine
#
#    - name: Build package
#      run: python -m build
#
#    - name: Publish to PyPI
#      env:
#        TWINE_USERNAME: __token__
#        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
#      run: twine upload dist/*